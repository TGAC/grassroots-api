/*!
\mainpage

\section toc Contents
\li \ref intro
\li \ref usage
\li \ref compliance 

\section intro Introduction

hcxselect is a small CSS selector engine for <a
href="http://htmlcxx.sourceforge.net/">htmlcxx</a>. It parses CSS
selector expressions and applies them to a set of trees of HTML nodes
parsed via htmlcxx.


\section usage Usage information

The interface of hcxselect is very minimalistic, and using it should
be quite straightforward if you're familiar with C++ and htmlcxx.
<a href="select_8cpp-example.html">A short example</a> is provided,
including a short walk-through.

The library consists of a header and a source file and is currently
meant to be directly included in other software, as it provides no
installation options.


\section compliance Compliance

hcxselect aims to comply with the <a
href="http://www.w3.org/TR/selectors/">Selectors Level 3
specification</a>. However, a couple of browser-specific selectors are
not implemented, as they don't make sense here:

\li pseudo-classes:
	<tt>:link, visited, :hover, :active, :focus, :target, :lang,
	:enabled, :disabled, :checked, :indeterminate</tt>

\li pseudo-elements:
	<tt>::before, ::after</tt>

The following extra pseudo-classes are provided for convenience:

\li <tt>:text</tt> matches text (i.e., non-text and non-comment node)
\li <tt>:comment</tt> matches comment nodes


\section license License
hcxselect licensed under 3-clause BSD license. However, please be aware
that htmlcxx itself uses the GNU Lesser General Public License (LGPL)
and uses <a href="http://tree.phi-sci.com/">tree.hh</a>, which in turn
is available under the GNU General Public License (GPL), version 2 or 3.

The following is the license text for hcxselect, as present in the
distribution's COPYING document:
\verbatim
hcxselect - A CSS selector engine for htmlcxx
Copyright (C) 2011 Jonas Gehring
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the copyright holders nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
\endverbatim

*/


/*!
\example select.cpp
\anchor example_select

<p>
This example shows how to use hcxselect by setting up a simple command-line
program for CSS selection.
</p>

A short walk-through follows; the full code can be found at the \ref source
"bottom of this page".
First, the HTML code will be read from \p stdin using fancy stream operators:
\code
std::string source((istreambuf_iterator<char>(cin)), istreambuf_iterator<char>());
\endcode

Next, the HTML code in \p source is going to be parsed using htmlcxx.
\code
htmlcxx::HTML::ParserDom parser;
tree<htmlcxx::HTML::Node> dom = parser.parseTree(source);
\endcode

A convenient hcxselect::Selector class is constructed using the HTML syntax tree.
\code
hcxselect::Selector s(dom);
\endcode

Now hcxselect::Selector::select() can be used to select a set of nodes
from \p s, using the selector string supplied by the user at the
command-line as \p argv[1]. This set will be assigned to \p s again. Node
selection involves parsing of a selector expression, which in turn might
throw a hcxselect::ParseException. If an exception is thrown,
it will be catched and an error message will be written to \p stderr.
\code
try {
	s = s.select(argv[1]);
} catch (hcxselect::ParseException &ex) {
	cerr << "Parse error: '" << argv[1] << "': " << ex.what() << endl;
	cerr << "              ";
	for (int i = 1; i < ex.position(); i++) {
		cerr << " ";
	}
	cerr << "^" << endl;
	return 1;
}
\endcode

Finally, the resulting set of HTML nodes will be printed to \p stdout,
including the start tag, the end tag and everything in between. Since
a hcxselector::Selector is a \p std::set of HTML tree nodes, this can
be done using standard set iterators.
\code
for (hcxselect::Selector::const_iterator it = s.begin(); it != s.end(); ++it) {
	cout << source.substr((*it)->data.offset(), (*it)->data.length());
}
\endcode

\anchor source
That's all! The full source code of the program follows.

 */
